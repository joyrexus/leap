// Generated by CoffeeScript 1.6.3
(function() {
  var animateSelection, axis, clickSelector, clicked, clicks, colors, draw, drawLine, focus, h, load, mockLine, plot, points, position, reset, selection, velocity, w;

  w = 960;

  h = 800;

  axis = h / 2;

  clicks = 0;

  draw = 'graph';

  points = [];

  clicked = [];

  colors = {
    position: 'steelblue',
    velocity: '#777',
    highlight: 'orange'
  };

  selection = {
    active: false,
    begin: null,
    end: null
  };

  animateSelection = function() {
    return animate(points.slice(selection.begin, +selection.end + 1 || 9e9));
  };

  focus = function() {
    this.stroke(colors.highlight);
    time.innerHTML = this.data('time');
    return value.innerHTML = this.data('value');
  };

  reset = function() {
    var p, _i, _len, _ref;
    _ref = points.slice(selection.begin, +selection.end + 1 || 9e9);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      p.stroke(colors.velocity);
      p.data('selected', false);
    }
    selection.active = false;
    selection.end = null;
    return end.innerHTML = 'End';
  };

  clickSelector = function() {
    var p, _i, _j, _len, _len1, _ref;
    clicks += 1;
    if (clicks === 1) {
      reset();
      clicked.push(this.data('clicked', true));
      selection.begin = this.data('index');
      begin.innerHTML = this.data('time');
      return viewer.style.visibility = 'visible';
    } else {
      selection.active = true;
      if (this.data('index') < selection.begin) {
        selection.end = selection.begin;
        end.innerHTML = begin.innerHTML;
        selection.begin = this.data('index');
        begin.innerHTML = this.data('time');
      } else {
        selection.end = this.data('index');
        end.innerHTML = this.data('time');
      }
      for (_i = 0, _len = clicked.length; _i < _len; _i++) {
        p = clicked[_i];
        p.data('clicked', false);
        p.stroke(p.data('color'));
      }
      _ref = points.slice(selection.begin, +selection.end + 1 || 9e9);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        p = _ref[_j];
        p.stroke(colors.highlight);
        p.data('selected', true);
      }
      clicks = 0;
      return animateSelection();
    }
  };

  drawLine = function(time, value, tick, color) {
    if (color == null) {
      color = 'steelblue';
    }
    return draw.line(tick, axis, tick, axis - value).stroke(color).data('time', time).data('value', value).data('color', color).mouseover(focus).mouseout(function() {
      if (!(this.data('clicked') || this.data('selected'))) {
        return this.stroke((function() {
          return color;
        })());
      }
    }).click(clickSelector);
  };

  mockLine = {
    stroke: function() {
      return this;
    },
    data: function(key, value) {
      this[key] = value;
      return this;
    }
  };

  plot = function(data) {
    var color, d, i, position, skip, start, tick, time, v, velocity;
    tick = 0;
    skip = false;
    start = data[0].timestamp;
    draw = SVG('graph').size(w, h);
    for (i in data) {
      d = data[i];
      time = (d.timestamp - start) / 1000000;
      position = d.left.pos.y;
      velocity = d.left.vel.y;
      if (position) {
        skip = false;
        tick += 1;
        drawLine(time, position, tick).data('index', i);
        v = drawLine(time, velocity, tick, color = "#777").data('index', i).data('left', d.left.pos).data('right', d.right.pos).opacity(.8);
        points.push(v);
      } else {
        if (!skip) {
          tick += 10;
        }
        skip = true;
        points.push(mockLine);
      }
    }
    w = tick;
    draw.size(w, h);
    return draw.rect(w, h).back().attr("class", "border");
  };

  velocity = function(d) {
    return d.left.vel.y;
  };

  position = function(d) {
    return d.left.pos.y;
  };

  load = function() {
    var File, reader;
    File = this.files[0];
    if (!File.type.match('\.json$')) {
      return;
    }
    file.textContent = File.name;
    reader = new FileReader();
    reader.onload = function(file) {
      return plot(JSON.parse(this.result));
    };
    reader.readAsText(File);
    return cursor.style.visibility = 'visible';
  };

  chooser.addEventListener('change', load);

  file.addEventListener('click', function() {
    return chooser.click();
  });

  hands.addEventListener('click', animateSelection);

}).call(this);
